import { IApp, IFeature } from '../Interfaces';
import { FeatureCommonType, FeatureStandardEventsType } from '../Types';
export default abstract class Feature<F extends FeatureCommonType, A extends IApp<any>> implements IFeature<F, A> {
    abstract name: string;
    readonly uuid: string;
    readonly baseEvents: FeatureStandardEventsType<IFeature<F, A>>;
    data: F['data'];
    config: F['config'];
    events: F['events'];
    factories: F['factories'];
    views: F['views'];
    models: F['models'];
    collections: F['collections'];
    dataManagers: F['dataManagers'];
    features: F['features'];
    translations: F['translations'];
    private parentFeature;
    constructor(settings?: Partial<F>);
    setParentFeature(feature: F['parentFeature']): void;
    getParentFeature(): F['parentFeature'] | never;
    hasParentFeature(): boolean;
    setInitialData(data: Omit<F, 'parentFeature'>): boolean;
    setInitialDataPartly(data: Partial<Omit<F, 'parentFeature'>>): boolean;
    setApp(app: A): boolean;
    getApp(): A;
    hasApp(): boolean;
    init(): Promise<boolean>;
    private initTranslations;
    abstract initFeature(): Promise<boolean>;
    cfg(): F['config'];
    updateConfig(newConfig: Partial<F['config']>): void;
    updateData(data: Partial<F['data']>): void;
    isInitialized(): boolean;
    setInitialized(initialized: boolean): void;
    update(): void;
}
