import { Locale } from 'locale-enum';
import { AppFeaturesType, AppStandardEventsType, AppCommonType, DefaultAppConfigType, ErrorTypeEnum, TranslationPluralItemType } from '../Types';
import { IApp, IErrorHandler, ILogger } from '../Interfaces';
import { ErrorHandler } from '../Models';
export default abstract class Application<T extends AppCommonType> implements IApp<T> {
    private initialized;
    private locales;
    locale: Locale;
    readonly fallbackLocale: Locale;
    debug: boolean;
    readonly baseEvents: AppStandardEventsType<T['config']>;
    readonly logger: ILogger;
    readonly errorHandler: ErrorHandler;
    additionalLoggers: ILogger[];
    additionalErrorHandlers: IErrorHandler[];
    config: T['config'];
    events: T['events'];
    factories: T['factories'];
    translations: T['translations'];
    views: T['views'];
    models: T['models'];
    collections: T['collections'];
    dataManagers: T['dataManagers'];
    dataProviders: T['dataProviders'];
    constructor(data: Partial<T>, locales?: Partial<DefaultAppConfigType>);
    private setData;
    updateConfig(config: Partial<T['config']>): void;
    setConfig<K extends keyof T['config']>(key: K, value: T['config'][K]): void;
    features(): T['features'];
    setFeatures(features: T['features']): void;
    init(data?: Partial<T>): Promise<ApplicationInitSuccessfulType>;
    private initTranslations;
    isInitialized(): boolean;
    err(error: string): void;
    throwErr(error: string): void;
    warning(error: string): void;
    log(message: string, type?: ErrorTypeEnum): void;
    info(message: string): void;
    setLocales(locales: Locale[]): void;
    getAvailableLocales(): Locale[];
    isLocaleAvailable(locale: Locale): boolean;
    setCurrentLocale(locale: Locale): boolean;
    getCurrentLocale(): Locale;
    t(value: string | TranslationPluralItemType, data?: Record<string, string>, number?: number): string;
    error(err: string): never;
    setAppToFeatures(features: AppFeaturesType): void;
    update(): void;
}
export declare type ApplicationInitSuccessfulType = boolean;
export declare type ApplicationInitFailedType = {
    error: string;
};
